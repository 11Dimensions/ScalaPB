// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.google.protobuf.descriptor

object DescriptorProtoCompanion extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq(
    com.google.protobuf.descriptor.FileDescriptorSet,
    com.google.protobuf.descriptor.FileDescriptorProto,
    com.google.protobuf.descriptor.DescriptorProto,
    com.google.protobuf.descriptor.FieldDescriptorProto,
    com.google.protobuf.descriptor.OneofDescriptorProto,
    com.google.protobuf.descriptor.EnumDescriptorProto,
    com.google.protobuf.descriptor.EnumValueDescriptorProto,
    com.google.protobuf.descriptor.ServiceDescriptorProto,
    com.google.protobuf.descriptor.MethodDescriptorProto,
    com.google.protobuf.descriptor.FileOptions,
    com.google.protobuf.descriptor.MessageOptions,
    com.google.protobuf.descriptor.FieldOptions,
    com.google.protobuf.descriptor.OneofOptions,
    com.google.protobuf.descriptor.EnumOptions,
    com.google.protobuf.descriptor.EnumValueOptions,
    com.google.protobuf.descriptor.ServiceOptions,
    com.google.protobuf.descriptor.MethodOptions,
    com.google.protobuf.descriptor.UninterpretedOption,
    com.google.protobuf.descriptor.SourceCodeInfo,
    com.google.protobuf.descriptor.GeneratedCodeInfo
  )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.Seq(
  """CiBnb29nbGUvcHJvdG9idWYvZGVzY3JpcHRvci5wcm90bxIPZ29vZ2xlLnByb3RvYnVmIlgKEUZpbGVEZXNjcmlwdG9yU2V0E
  kMKBGZpbGUYASADKAsyJC5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JQcm90b0IJ4j8GEgRmaWxlUgRmaWxlIqkGChNGa
  WxlRGVzY3JpcHRvclByb3RvEh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRImCgdwYWNrYWdlGAIgASgJQgziPwkSB3BhY
  2thZ2VSB3BhY2thZ2USLwoKZGVwZW5kZW5jeRgDIAMoCUIP4j8MEgpkZXBlbmRlbmN5UgpkZXBlbmRlbmN5EkIKEXB1YmxpY19kZ
  XBlbmRlbmN5GAogAygFQhXiPxISEHB1YmxpY0RlcGVuZGVuY3lSEHB1YmxpY0RlcGVuZGVuY3kSPAoPd2Vha19kZXBlbmRlbmN5G
  AsgAygFQhPiPxASDndlYWtEZXBlbmRlbmN5Ug53ZWFrRGVwZW5kZW5jeRJVCgxtZXNzYWdlX3R5cGUYBCADKAsyIC5nb29nbGUuc
  HJvdG9idWYuRGVzY3JpcHRvclByb3RvQhDiPw0SC21lc3NhZ2VUeXBlUgttZXNzYWdlVHlwZRJQCgllbnVtX3R5cGUYBSADKAsyJ
  C5nb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90b0IN4j8KEghlbnVtVHlwZVIIZW51bVR5cGUSTwoHc2VydmljZRgGI
  AMoCzInLmdvb2dsZS5wcm90b2J1Zi5TZXJ2aWNlRGVzY3JpcHRvclByb3RvQgziPwkSB3NlcnZpY2VSB3NlcnZpY2USUwoJZXh0Z
  W5zaW9uGAcgAygLMiUuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvQg7iPwsSCWV4dGVuc2lvblIJZXh0ZW5za
  W9uEkQKB29wdGlvbnMYCCABKAsyHC5nb29nbGUucHJvdG9idWYuRmlsZU9wdGlvbnNCDOI/CRIHb3B0aW9uc1IHb3B0aW9ucxJeC
  hBzb3VyY2VfY29kZV9pbmZvGAkgASgLMh8uZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvZGVJbmZvQhPiPxASDnNvdXJjZUNvZGVJb
  mZvUg5zb3VyY2VDb2RlSW5mbxIjCgZzeW50YXgYDCABKAlCC+I/CBIGc3ludGF4UgZzeW50YXgixAcKD0Rlc2NyaXB0b3JQcm90b
  xIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSRwoFZmllbGQYAiADKAsyJS5nb29nbGUucHJvdG9idWYuRmllbGREZXNjc
  mlwdG9yUHJvdG9CCuI/BxIFZmllbGRSBWZpZWxkElMKCWV4dGVuc2lvbhgGIAMoCzIlLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc
  2NyaXB0b3JQcm90b0IO4j8LEglleHRlbnNpb25SCWV4dGVuc2lvbhJSCgtuZXN0ZWRfdHlwZRgDIAMoCzIgLmdvb2dsZS5wcm90b
  2J1Zi5EZXNjcmlwdG9yUHJvdG9CD+I/DBIKbmVzdGVkVHlwZVIKbmVzdGVkVHlwZRJQCgllbnVtX3R5cGUYBCADKAsyJC5nb29nb
  GUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90b0IN4j8KEghlbnVtVHlwZVIIZW51bVR5cGUSbQoPZXh0ZW5zaW9uX3JhbmdlG
  AUgAygLMi8uZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5FeHRlbnNpb25SYW5nZUIT4j8QEg5leHRlbnNpb25SYW5nZ
  VIOZXh0ZW5zaW9uUmFuZ2USVAoKb25lb2ZfZGVjbBgIIAMoCzIlLmdvb2dsZS5wcm90b2J1Zi5PbmVvZkRlc2NyaXB0b3JQcm90b
  0IO4j8LEglvbmVvZkRlY2xSCW9uZW9mRGVjbBJHCgdvcHRpb25zGAcgASgLMh8uZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb
  25zQgziPwkSB29wdGlvbnNSB29wdGlvbnMSaQoOcmVzZXJ2ZWRfcmFuZ2UYCSADKAsyLi5nb29nbGUucHJvdG9idWYuRGVzY3Jpc
  HRvclByb3RvLlJlc2VydmVkUmFuZ2VCEuI/DxINcmVzZXJ2ZWRSYW5nZVINcmVzZXJ2ZWRSYW5nZRI2Cg1yZXNlcnZlZF9uYW1lG
  AogAygJQhHiPw4SDHJlc2VydmVkTmFtZVIMcmVzZXJ2ZWROYW1lGk4KDkV4dGVuc2lvblJhbmdlEiAKBXN0YXJ0GAEgASgFQgriP
  wcSBXN0YXJ0UgVzdGFydBIaCgNlbmQYAiABKAVCCOI/BRIDZW5kUgNlbmQaTQoNUmVzZXJ2ZWRSYW5nZRIgCgVzdGFydBgBIAEoB
  UIK4j8HEgVzdGFydFIFc3RhcnQSGgoDZW5kGAIgASgFQgjiPwUSA2VuZFIDZW5kIqYHChRGaWVsZERlc2NyaXB0b3JQcm90bxIdC
  gRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSIwoGbnVtYmVyGAMgASgFQgviPwgSBm51bWJlclIGbnVtYmVyEk0KBWxhYmVsG
  AQgASgOMisuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLkxhYmVsQgriPwcSBWxhYmVsUgVsYWJlbBJJCgR0e
  XBlGAUgASgOMiouZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLlR5cGVCCeI/BhIEdHlwZVIEdHlwZRIqCgl0e
  XBlX25hbWUYBiABKAlCDeI/ChIIdHlwZU5hbWVSCHR5cGVOYW1lEikKCGV4dGVuZGVlGAIgASgJQg3iPwoSCGV4dGVuZGVlUghle
  HRlbmRlZRI2Cg1kZWZhdWx0X3ZhbHVlGAcgASgJQhHiPw4SDGRlZmF1bHRWYWx1ZVIMZGVmYXVsdFZhbHVlEjAKC29uZW9mX2luZ
  GV4GAkgASgFQg/iPwwSCm9uZW9mSW5kZXhSCm9uZW9mSW5kZXgSKgoJanNvbl9uYW1lGAogASgJQg3iPwoSCGpzb25OYW1lUghqc
  29uTmFtZRJFCgdvcHRpb25zGAggASgLMh0uZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9uc0IM4j8JEgdvcHRpb25zUgdvcHRpb
  25zIrYCCgRUeXBlEg8KC1RZUEVfRE9VQkxFEAESDgoKVFlQRV9GTE9BVBACEg4KClRZUEVfSU5UNjQQAxIPCgtUWVBFX1VJTlQ2N
  BAEEg4KClRZUEVfSU5UMzIQBRIQCgxUWVBFX0ZJWEVENjQQBhIQCgxUWVBFX0ZJWEVEMzIQBxINCglUWVBFX0JPT0wQCBIPCgtUW
  VBFX1NUUklORxAJEg4KClRZUEVfR1JPVVAQChIQCgxUWVBFX01FU1NBR0UQCxIOCgpUWVBFX0JZVEVTEAwSDwoLVFlQRV9VSU5UM
  zIQDRINCglUWVBFX0VOVU0QDhIRCg1UWVBFX1NGSVhFRDMyEA8SEQoNVFlQRV9TRklYRUQ2NBAQEg8KC1RZUEVfU0lOVDMyEBESD
  woLVFlQRV9TSU5UNjQQEiJDCgVMYWJlbBISCg5MQUJFTF9PUFRJT05BTBABEhIKDkxBQkVMX1JFUVVJUkVEEAISEgoOTEFCRUxfU
  kVQRUFURUQQAyJ8ChRPbmVvZkRlc2NyaXB0b3JQcm90bxIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSRQoHb3B0aW9uc
  xgCIAEoCzIdLmdvb2dsZS5wcm90b2J1Zi5PbmVvZk9wdGlvbnNCDOI/CRIHb3B0aW9uc1IHb3B0aW9ucyLHAQoTRW51bURlc2Nya
  XB0b3JQcm90bxIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSSwoFdmFsdWUYAiADKAsyKS5nb29nbGUucHJvdG9idWYuR
  W51bVZhbHVlRGVzY3JpcHRvclByb3RvQgriPwcSBXZhbHVlUgV2YWx1ZRJECgdvcHRpb25zGAMgASgLMhwuZ29vZ2xlLnByb3RvY
  nVmLkVudW1PcHRpb25zQgziPwkSB29wdGlvbnNSB29wdGlvbnMiqQEKGEVudW1WYWx1ZURlc2NyaXB0b3JQcm90bxIdCgRuYW1lG
  AEgASgJQgniPwYSBG5hbWVSBG5hbWUSIwoGbnVtYmVyGAIgASgFQgviPwgSBm51bWJlclIGbnVtYmVyEkkKB29wdGlvbnMYAyABK
  AsyIS5nb29nbGUucHJvdG9idWYuRW51bVZhbHVlT3B0aW9uc0IM4j8JEgdvcHRpb25zUgdvcHRpb25zIs0BChZTZXJ2aWNlRGVzY
  3JpcHRvclByb3RvEh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRJLCgZtZXRob2QYAiADKAsyJi5nb29nbGUucHJvdG9id
  WYuTWV0aG9kRGVzY3JpcHRvclByb3RvQgviPwgSBm1ldGhvZFIGbWV0aG9kEkcKB29wdGlvbnMYAyABKAsyHy5nb29nbGUucHJvd
  G9idWYuU2VydmljZU9wdGlvbnNCDOI/CRIHb3B0aW9uc1IHb3B0aW9ucyLvAgoVTWV0aG9kRGVzY3JpcHRvclByb3RvEh0KBG5hb
  WUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRItCgppbnB1dF90eXBlGAIgASgJQg7iPwsSCWlucHV0VHlwZVIJaW5wdXRUeXBlEjAKC
  291dHB1dF90eXBlGAMgASgJQg/iPwwSCm91dHB1dFR5cGVSCm91dHB1dFR5cGUSRgoHb3B0aW9ucxgEIAEoCzIeLmdvb2dsZS5wc
  m90b2J1Zi5NZXRob2RPcHRpb25zQgziPwkSB29wdGlvbnNSB29wdGlvbnMSRgoQY2xpZW50X3N0cmVhbWluZxgFIAEoCDoFZmFsc
  2VCFOI/ERIPY2xpZW50U3RyZWFtaW5nUg9jbGllbnRTdHJlYW1pbmcSRgoQc2VydmVyX3N0cmVhbWluZxgGIAEoCDoFZmFsc2VCF
  OI/ERIPc2VydmVyU3RyZWFtaW5nUg9zZXJ2ZXJTdHJlYW1pbmci1QoKC0ZpbGVPcHRpb25zEjMKDGphdmFfcGFja2FnZRgBIAEoC
  UIQ4j8NEgtqYXZhUGFja2FnZVILamF2YVBhY2thZ2USSQoUamF2YV9vdXRlcl9jbGFzc25hbWUYCCABKAlCF+I/FBISamF2YU91d
  GVyQ2xhc3NuYW1lUhJqYXZhT3V0ZXJDbGFzc25hbWUSTQoTamF2YV9tdWx0aXBsZV9maWxlcxgKIAEoCDoFZmFsc2VCFuI/ExIRa
  mF2YU11bHRpcGxlRmlsZXNSEWphdmFNdWx0aXBsZUZpbGVzEmIKHWphdmFfZ2VuZXJhdGVfZXF1YWxzX2FuZF9oYXNoGBQgASgIQ
  iAYAeI/GxIZamF2YUdlbmVyYXRlRXF1YWxzQW5kSGFzaFIZamF2YUdlbmVyYXRlRXF1YWxzQW5kSGFzaBJUChZqYXZhX3N0cmluZ
  19jaGVja191dGY4GBsgASgIOgVmYWxzZUIY4j8VEhNqYXZhU3RyaW5nQ2hlY2tVdGY4UhNqYXZhU3RyaW5nQ2hlY2tVdGY4EmUKD
  G9wdGltaXplX2ZvchgJIAEoDjIpLmdvb2dsZS5wcm90b2J1Zi5GaWxlT3B0aW9ucy5PcHRpbWl6ZU1vZGU6BVNQRUVEQhDiPw0SC
  29wdGltaXplRm9yUgtvcHRpbWl6ZUZvchItCgpnb19wYWNrYWdlGAsgASgJQg7iPwsSCWdvUGFja2FnZVIJZ29QYWNrYWdlEk0KE
  2NjX2dlbmVyaWNfc2VydmljZXMYECABKAg6BWZhbHNlQhbiPxMSEWNjR2VuZXJpY1NlcnZpY2VzUhFjY0dlbmVyaWNTZXJ2aWNlc
  xJTChVqYXZhX2dlbmVyaWNfc2VydmljZXMYESABKAg6BWZhbHNlQhjiPxUSE2phdmFHZW5lcmljU2VydmljZXNSE2phdmFHZW5lc
  mljU2VydmljZXMSTQoTcHlfZ2VuZXJpY19zZXJ2aWNlcxgSIAEoCDoFZmFsc2VCFuI/ExIRcHlHZW5lcmljU2VydmljZXNSEXB5R
  2VuZXJpY1NlcnZpY2VzEjYKCmRlcHJlY2F0ZWQYFyABKAg6BWZhbHNlQg/iPwwSCmRlcHJlY2F0ZWRSCmRlcHJlY2F0ZWQSRAoQY
  2NfZW5hYmxlX2FyZW5hcxgfIAEoCDoFZmFsc2VCE+I/EBIOY2NFbmFibGVBcmVuYXNSDmNjRW5hYmxlQXJlbmFzEkAKEW9iamNfY
  2xhc3NfcHJlZml4GCQgASgJQhTiPxESD29iamNDbGFzc1ByZWZpeFIPb2JqY0NsYXNzUHJlZml4Ej8KEGNzaGFycF9uYW1lc3BhY
  2UYJSABKAlCFOI/ERIPY3NoYXJwTmFtZXNwYWNlUg9jc2hhcnBOYW1lc3BhY2USMwoMc3dpZnRfcHJlZml4GCcgASgJQhDiPw0SC
  3N3aWZ0UHJlZml4Ugtzd2lmdFByZWZpeBI9ChBwaHBfY2xhc3NfcHJlZml4GCggASgJQhPiPxASDnBocENsYXNzUHJlZml4Ug5wa
  HBDbGFzc1ByZWZpeBJyChR1bmludGVycHJldGVkX29wdGlvbhjnByADKAsyJC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZ
  E9wdGlvbkIY4j8VEhN1bmludGVycHJldGVkT3B0aW9uUhN1bmludGVycHJldGVkT3B0aW9uIjoKDE9wdGltaXplTW9kZRIJCgVTU
  EVFRBABEg0KCUNPREVfU0laRRACEhAKDExJVEVfUlVOVElNRRADKgkI6AcQgICAgAJKBAgmECciyQMKDk1lc3NhZ2VPcHRpb25zE
  lcKF21lc3NhZ2Vfc2V0X3dpcmVfZm9ybWF0GAEgASgIOgVmYWxzZUIZ4j8WEhRtZXNzYWdlU2V0V2lyZUZvcm1hdFIUbWVzc2FnZ
  VNldFdpcmVGb3JtYXQSbwofbm9fc3RhbmRhcmRfZGVzY3JpcHRvcl9hY2Nlc3NvchgCIAEoCDoFZmFsc2VCIeI/HhIcbm9TdGFuZ
  GFyZERlc2NyaXB0b3JBY2Nlc3NvclIcbm9TdGFuZGFyZERlc2NyaXB0b3JBY2Nlc3NvchI2CgpkZXByZWNhdGVkGAMgASgIOgVmY
  WxzZUIP4j8MEgpkZXByZWNhdGVkUgpkZXByZWNhdGVkEioKCW1hcF9lbnRyeRgHIAEoCEIN4j8KEghtYXBFbnRyeVIIbWFwRW50c
  nkScgoUdW5pbnRlcnByZXRlZF9vcHRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb25CGOI/F
  RITdW5pbnRlcnByZXRlZE9wdGlvblITdW5pbnRlcnByZXRlZE9wdGlvbioJCOgHEICAgIACSgQICBAJSgQICRAKIskECgxGaWVsZ
  E9wdGlvbnMSTQoFY3R5cGUYASABKA4yIy5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLkNUeXBlOgZTVFJJTkdCCuI/BxIFY
  3R5cGVSBWN0eXBlEiMKBnBhY2tlZBgCIAEoCEIL4j8IEgZwYWNrZWRSBnBhY2tlZBJUCgZqc3R5cGUYBiABKA4yJC5nb29nbGUuc
  HJvdG9idWYuRmllbGRPcHRpb25zLkpTVHlwZToJSlNfTk9STUFMQgviPwgSBmpzdHlwZVIGanN0eXBlEiQKBGxhenkYBSABKAg6B
  WZhbHNlQgniPwYSBGxhenlSBGxhenkSNgoKZGVwcmVjYXRlZBgDIAEoCDoFZmFsc2VCD+I/DBIKZGVwcmVjYXRlZFIKZGVwcmVjY
  XRlZBIkCgR3ZWFrGAogASgIOgVmYWxzZUIJ4j8GEgR3ZWFrUgR3ZWFrEnIKFHVuaW50ZXJwcmV0ZWRfb3B0aW9uGOcHIAMoCzIkL
  mdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uQhjiPxUSE3VuaW50ZXJwcmV0ZWRPcHRpb25SE3VuaW50ZXJwcmV0Z
  WRPcHRpb24iLwoFQ1R5cGUSCgoGU1RSSU5HEAASCAoEQ09SRBABEhAKDFNUUklOR19QSUVDRRACIjUKBkpTVHlwZRINCglKU19OT
  1JNQUwQABINCglKU19TVFJJTkcQARINCglKU19OVU1CRVIQAioJCOgHEICAgIACSgQIBBAFIo0BCgxPbmVvZk9wdGlvbnMScgoUd
  W5pbnRlcnByZXRlZF9vcHRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb25CGOI/FRITdW5pb
  nRlcnByZXRlZE9wdGlvblITdW5pbnRlcnByZXRlZE9wdGlvbioJCOgHEICAgIACIvwBCgtFbnVtT3B0aW9ucxIwCgthbGxvd19hb
  GlhcxgCIAEoCEIP4j8MEgphbGxvd0FsaWFzUgphbGxvd0FsaWFzEjYKCmRlcHJlY2F0ZWQYAyABKAg6BWZhbHNlQg/iPwwSCmRlc
  HJlY2F0ZWRSCmRlcHJlY2F0ZWQScgoUdW5pbnRlcnByZXRlZF9vcHRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50Z
  XJwcmV0ZWRPcHRpb25CGOI/FRITdW5pbnRlcnByZXRlZE9wdGlvblITdW5pbnRlcnByZXRlZE9wdGlvbioJCOgHEICAgIACSgQIB
  RAGIskBChBFbnVtVmFsdWVPcHRpb25zEjYKCmRlcHJlY2F0ZWQYASABKAg6BWZhbHNlQg/iPwwSCmRlcHJlY2F0ZWRSCmRlcHJlY
  2F0ZWQScgoUdW5pbnRlcnByZXRlZF9vcHRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb25CG
  OI/FRITdW5pbnRlcnByZXRlZE9wdGlvblITdW5pbnRlcnByZXRlZE9wdGlvbioJCOgHEICAgIACIscBCg5TZXJ2aWNlT3B0aW9uc
  xI2CgpkZXByZWNhdGVkGCEgASgIOgVmYWxzZUIP4j8MEgpkZXByZWNhdGVkUgpkZXByZWNhdGVkEnIKFHVuaW50ZXJwcmV0ZWRfb
  3B0aW9uGOcHIAMoCzIkLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uQhjiPxUSE3VuaW50ZXJwcmV0ZWRPcHRpb
  25SE3VuaW50ZXJwcmV0ZWRPcHRpb24qCQjoBxCAgICAAiKjAwoNTWV0aG9kT3B0aW9ucxI2CgpkZXByZWNhdGVkGCEgASgIOgVmY
  WxzZUIP4j8MEgpkZXByZWNhdGVkUgpkZXByZWNhdGVkEogBChFpZGVtcG90ZW5jeV9sZXZlbBgiIAEoDjIvLmdvb2dsZS5wcm90b
  2J1Zi5NZXRob2RPcHRpb25zLklkZW1wb3RlbmN5TGV2ZWw6E0lERU1QT1RFTkNZX1VOS05PV05CFeI/EhIQaWRlbXBvdGVuY3lMZ
  XZlbFIQaWRlbXBvdGVuY3lMZXZlbBJyChR1bmludGVycHJldGVkX29wdGlvbhjnByADKAsyJC5nb29nbGUucHJvdG9idWYuVW5pb
  nRlcnByZXRlZE9wdGlvbkIY4j8VEhN1bmludGVycHJldGVkT3B0aW9uUhN1bmludGVycHJldGVkT3B0aW9uIlAKEElkZW1wb3Rlb
  mN5TGV2ZWwSFwoTSURFTVBPVEVOQ1lfVU5LTk9XThAAEhMKD05PX1NJREVfRUZGRUNUUxABEg4KCklERU1QT1RFTlQQAioJCOgHE
  ICAgIACIsMEChNVbmludGVycHJldGVkT3B0aW9uEkwKBG5hbWUYAiADKAsyLS5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZ
  E9wdGlvbi5OYW1lUGFydEIJ4j8GEgRuYW1lUgRuYW1lEj8KEGlkZW50aWZpZXJfdmFsdWUYAyABKAlCFOI/ERIPaWRlbnRpZmllc
  lZhbHVlUg9pZGVudGlmaWVyVmFsdWUSQwoScG9zaXRpdmVfaW50X3ZhbHVlGAQgASgEQhXiPxISEHBvc2l0aXZlSW50VmFsdWVSE
  HBvc2l0aXZlSW50VmFsdWUSQwoSbmVnYXRpdmVfaW50X3ZhbHVlGAUgASgDQhXiPxISEG5lZ2F0aXZlSW50VmFsdWVSEG5lZ2F0a
  XZlSW50VmFsdWUSMwoMZG91YmxlX3ZhbHVlGAYgASgBQhDiPw0SC2RvdWJsZVZhbHVlUgtkb3VibGVWYWx1ZRIzCgxzdHJpbmdfd
  mFsdWUYByABKAxCEOI/DRILc3RyaW5nVmFsdWVSC3N0cmluZ1ZhbHVlEjwKD2FnZ3JlZ2F0ZV92YWx1ZRgIIAEoCUIT4j8QEg5hZ
  2dyZWdhdGVWYWx1ZVIOYWdncmVnYXRlVmFsdWUaawoITmFtZVBhcnQSKgoJbmFtZV9wYXJ0GAEgAigJQg3iPwoSCG5hbWVQYXJ0U
  ghuYW1lUGFydBIzCgxpc19leHRlbnNpb24YAiACKAhCEOI/DRILaXNFeHRlbnNpb25SC2lzRXh0ZW5zaW9uIpMDCg5Tb3VyY2VDb
  2RlSW5mbxJTCghsb2NhdGlvbhgBIAMoCzIoLmdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb2RlSW5mby5Mb2NhdGlvbkIN4j8KEghsb
  2NhdGlvblIIbG9jYXRpb24aqwIKCExvY2F0aW9uEh8KBHBhdGgYASADKAVCCxAB4j8GEgRwYXRoUgRwYXRoEh8KBHNwYW4YAiADK
  AVCCxAB4j8GEgRzcGFuUgRzcGFuEj8KEGxlYWRpbmdfY29tbWVudHMYAyABKAlCFOI/ERIPbGVhZGluZ0NvbW1lbnRzUg9sZWFka
  W5nQ29tbWVudHMSQgoRdHJhaWxpbmdfY29tbWVudHMYBCABKAlCFeI/EhIQdHJhaWxpbmdDb21tZW50c1IQdHJhaWxpbmdDb21tZ
  W50cxJYChlsZWFkaW5nX2RldGFjaGVkX2NvbW1lbnRzGAYgAygJQhziPxkSF2xlYWRpbmdEZXRhY2hlZENvbW1lbnRzUhdsZWFka
  W5nRGV0YWNoZWRDb21tZW50cyKTAgoRR2VuZXJhdGVkQ29kZUluZm8SXgoKYW5ub3RhdGlvbhgBIAMoCzItLmdvb2dsZS5wcm90b
  2J1Zi5HZW5lcmF0ZWRDb2RlSW5mby5Bbm5vdGF0aW9uQg/iPwwSCmFubm90YXRpb25SCmFubm90YXRpb24anQEKCkFubm90YXRpb
  24SHwoEcGF0aBgBIAMoBUILEAHiPwYSBHBhdGhSBHBhdGgSMAoLc291cmNlX2ZpbGUYAiABKAlCD+I/DBIKc291cmNlRmlsZVIKc
  291cmNlRmlsZRIgCgViZWdpbhgDIAEoBUIK4j8HEgViZWdpblIFYmVnaW4SGgoDZW5kGAQgASgFQgjiPwUSA2VuZFIDZW5kQowBC
  hNjb20uZ29vZ2xlLnByb3RvYnVmQhBEZXNjcmlwdG9yUHJvdG9zSAFaPmdpdGh1Yi5jb20vZ29sYW5nL3Byb3RvYnVmL3Byb3RvY
  y1nZW4tZ28vZGVzY3JpcHRvcjtkZXNjcmlwdG9yogIDR1BCqgIaR29vZ2xlLlByb3RvYnVmLlJlZmxlY3Rpb24="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}